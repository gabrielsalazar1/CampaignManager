AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito Stack

Resources:
  # Creates a user pool in cognito for your app to auth against
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BIGDATA_USERPOOL_CM_QAS
      AliasAttributes: [ preferred_username ]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: "Tu nombre de usuario es {username} y tu contraseña temporal es {####}"
          EmailSubject: "Tu contraseña temporal de Campaign Manager"
      AutoVerifiedAttributes:
        # - phone_number
        - email
      MfaConfiguration: "OFF"
      # SmsConfiguration:
      #   ExternalId: bigdata_cm_qas_external
      #   SnsCallerArn: !GetAtt SNSRole.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: false
        # - Name: slack_id
        #   AttributeDataType: String
        #   Mutable: true
  
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: bigdata_cm_qas_client
      GenerateSecret: false
      RefreshTokenValidity: 7
      UserPoolId: !Ref UserPool

  # Creates a User Groups in an UserPool
  UserPoolGroupADMIN:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Administradores del sistema"
      GroupName: "ADMIN"
      Precedence: 0
      UserPoolId: !Ref UserPool
  UserPoolGroupBO:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Bolivia"
      GroupName: "BO"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupCL:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Chile"
      GroupName: "CL"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupCO:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Colombia"
      GroupName: "CO"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupCR:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Costa Rica"
      GroupName: "CR"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupDOMINICANA:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Dominicana"
      GroupName: "DOMINICANA"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupEC:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Ecuador"
      GroupName: "EC"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupGUATEMALA:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Guatemala"
      GroupName: "GUATEMALA"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupMX:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais México"
      GroupName: "MX"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupPANAMA:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Panamá"
      GroupName: "PANAMA"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupPE:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Perú"
      GroupName: "PE"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupPUERTORICO:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais Puerto Rico"
      GroupName: "PUERTO_RICO"
      Precedence: 1
      UserPoolId: !Ref UserPool
  UserPoolGroupSALVADOR:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Planners del pais El Salvador"
      GroupName: "SALVADOR"
      Precedence: 1
      UserPoolId: !Ref UserPool
  
  # Creates a Federeated Identity Pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: BIGDATA_IDENTITYPOOL_CM_QAS
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Creates a role for unauthorized acces to AWS resources. Very limited access. 
  # Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : bigdata_cm_qas_CognitoUnAuthorizedRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "bigdata_cm_qas_CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Creates a role for authorized acces to AWS resources. Control what your user can access. 
  # This file only allows Lambda invocationm. Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName : bigdata_cm_qas_CognitoAuthorizedRole
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "bigdata_cm_qas_CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:UnlinkDeveloperIdentity"
                  - "cognito-identity:MergeDeveloperIdentities"
                  - "cognito-identity:GetId"
                  - "cognito-identity:DescribeIdentityPool"
                  - "cognito-identity:GetId"
                  - "cognito-identity:LookupDeveloperIdentity"
                  - "cognito-identity:ListIdentityPools"
                  - "cognito-identity:ListIdentities"
                  - "cognito-identity:UpdateIdentityPool"
                  - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
                  - "cognito-identity:UnlinkIdentity"
                  - "cognito-identity:GetOpenIdToken"
                  - "cognito-identity:GetIdentityPoolRoles"
                  - "cognito-identity:DescribeIdentity"
                  - "cognito-identity:GetCredentialsForIdentity"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: "IdentityPool::Id"