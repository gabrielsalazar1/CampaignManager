{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "API GW & Lambda Functions Stack",

  "Parameters" : {
    "Subnet" : {
      "Type" : "AWS::EC2::Subnet::Id",
      "Default" : "subnet-0c548fcc39366053c",
      "AllowedValues" : ["subnet-0c548fcc39366053c", "subnet-a69ac8cc"],
      "Description" : "Subnet to launch services in"
    },
    "VPC" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Default" : "vpc-05e755074841c4ea6",
      "AllowedValues" : ["vpc-05e755074841c4ea6", "vpc-ee8d3285"],
      "Description" : "VPC to launch services in"
    },
    "S3Bucket" : {
      "Type" : "String",
      "Default" : "campaign-manager-lambdas",
      "AllowedValues" : ["campaign-manager-lambdas", "belc-bigdata-cm-data-qas"],
      "Description" : "S3 Bucket where lambdas code is stored"
    },
    "ApiId": {
      "Description": "API Gateway App Id. E.g. 1yc6td9zjj",
      "Type": "String",
      "Default": ""
    }
  },

  "Conditions": {
    "ApiGatewayDeployed": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "ApiId"}]}]}
  },

  "Resources" : {
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : "SG_BIGDATA_CM_LMB_DEV",
        "GroupDescription" : "Allow HTTP traffic to the host",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }],
        "SecurityGroupEgress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }]
      }
    },

    "LambdaExecutionRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "RoleName" : "bigdata_cm_dev_lambda_ExecutionRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com", "apigateway.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path" : "/",
        "Policies" : [ 
          {
            "PolicyName": "bigdata_cm_dev_logs_lambda_RolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "*" }]
            }
          },
          {
            "PolicyName": "bigdata_cm_dev_network_lambda_RolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Resource": "*",
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:CreateNetworkInterface",
                  "ec2:AttachNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DeleteNetworkInterface",
                  "autoscaling:CompleteLifecycleAction"
                ]
              }]
            }
          },
          {
            "PolicyName": "bigdata_cm_dev_cognito_lambda_RolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": "cognito-idp:DescribeUserPoolClient",
                  "Resource": "arn:aws:cognito-idp:us-east-2:705522650906:userpool/us-east-2_xWXOjucyE",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "bigdata_cm_dev_full_lambda_RolePolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudformation:DescribeChangeSet",
                          "cloudformation:DescribeStackResources",
                          "cloudformation:DescribeStacks",
                          "cloudformation:GetTemplate",
                          "cloudformation:ListStackResources",
                          "cloudwatch:*",
                          "cognito-identity:ListIdentityPools",
                          "cognito-sync:GetCognitoEvents",
                          "cognito-sync:SetCognitoEvents",
                          "dynamodb:*",
                          "ec2:DescribeSecurityGroups",
                          "ec2:DescribeSubnets",
                          "ec2:DescribeVpcs",
                          "events:*",
                          "iam:GetPolicy",
                          "iam:GetPolicyVersion",
                          "iam:GetRole",
                          "iam:GetRolePolicy",
                          "iam:ListAttachedRolePolicies",
                          "iam:ListRolePolicies",
                          "iam:ListRoles",
                          "iam:PassRole",
                          "iot:AttachPrincipalPolicy",
                          "iot:AttachThingPrincipal",
                          "iot:CreateKeysAndCertificate",
                          "iot:CreatePolicy",
                          "iot:CreateThing",
                          "iot:CreateTopicRule",
                          "iot:DescribeEndpoint",
                          "iot:GetTopicRule",
                          "iot:ListPolicies",
                          "iot:ListThings",
                          "iot:ListTopicRules",
                          "iot:ReplaceTopicRule",
                          "kinesis:DescribeStream",
                          "kinesis:ListStreams",
                          "kinesis:PutRecord",
                          "kms:ListAliases",
                          "lambda:*",
                          "logs:*",
                          "s3:*",
                          "sns:ListSubscriptions",
                          "sns:ListSubscriptionsByTopic",
                          "sns:ListTopics",
                          "sns:Publish",
                          "sns:Subscribe",
                          "sns:Unsubscribe",
                          "sqs:ListQueues",
                          "sqs:SendMessage",
                          "tag:GetResources",
                          "xray:PutTelemetryRecords",
                          "xray:PutTraceSegments"
                      ],
                      "Resource": "*"
                  }
              ]
            }
          },
          {
            "PolicyName": "bigdata_cm_dev_api_lambda_RolePolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": [ "*","arn:aws:apigateway:us-east-1::*" ]
                },
                {
                  "Sid": "InvokePermission1",
                  "Effect": "Allow",
                  "Action": [ 
                    "lambda:InvokeFunction",
                    "sts:AssumeRole"
                  ],
                  "Resource": "arn:aws:apigateway:us-east-1::*"
                }
              ]
            }
          },
          {
            "PolicyName": "bigdata_cm_dev_s3_lambda_RolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                      "s3:PutObject",
                      "s3:GetObject"
                  ],
                  "Resource": [
                      "arn:aws:s3:::forecast-events-test/*",
                      "arn:aws:s3:::belc-bigdata-apps-shared-dev/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "lambda:invokeFunction",
                  "Resource": [
                      "arn:aws:s3:::forecast-events-test/*",
                      "arn:aws:s3:::belc-bigdata-apps-shared-dev/*"
                  ]
                },
                {
                  "Sid": "InvokePermission",
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaExecutionPolicy" : {
      "DependsOn": [ "LambdaExecutionRole" ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "bigdata_cm_dev_lambda_ExecutionPolicy",
        "Roles": [
            { "Ref": "LambdaExecutionRole" }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "logs:*" ],
              "Resource": [ "arn:aws:logs:*:*:*" ]
            },
            {
              "Effect": "Allow",
              "Action": [ "ec2:*" ],
              "Resource": [ "*" ]
            }
          ]
        }
      }
    },

    "LambdaEmrExecuterProcess" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_emr_executer_process",
        "ReservedConcurrentExecutions" : 12,
        "VpcConfig" : {
          "SecurityGroupIds" : [ { "Ref" : "SecurityGroup" } ],
          "SubnetIds" : [ { "Ref" : "Subnet" } ]
        },
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__emr_executer__process.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaHookDfListener" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_hook_df_listener",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__hook_df__listener.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaS3DfFilesNotifierListener" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_s3_df_files_notifier_listener",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__s3_df_files_notifier__listener.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaTriggerEplanningInputProcess" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_trigger_eplanning_input_process",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__trigger_eplanning_input__process.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaTriggerEplanningOutputProcess" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_trigger_eplanning_output_process",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__trigger_eplanning_output__process.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaTriggerIndicatorsTrigger" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_trigger_indicators_trigger",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__trigger_indicators__trigger.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaTriggerSbSyncProcess" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn" : [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_trigger_sb_sync_process",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__trigger_sb_sync__process.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 40,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1CampaignsRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_campaigns_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_campaigns__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1CampaignsScenariosRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_campaigns_scenarios_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_campaigns_scenarios__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1CatalogsParametersRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_catalogs_parameters_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_catalogs_parameters__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1CatalogsRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_catalogs_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_catalogs__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1ConfigurationsLeversRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_configurations_levers_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_configurations_levers__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1OffersByid": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_offers_byid",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_offers__byid.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1OffersCreate": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_offers_create",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_offers__create.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1OffersRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_offers_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_offers__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1OffersUpdate": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_offers_update",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_offers__update.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1ProductsRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_products_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_products__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1ResultsScenariosByid": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_results_scenarios_byid",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_results_scenarios__byid.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1ResultsScenariosCreate": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_results_scenarios_create",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_results_scenarios__create.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaV1ResultsScenariosUpdate": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_v1_results_scenarios_update",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__v1_results_scenarios__update.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    },
    "LambdaVersionRetrieve": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "LambdaExecutionRole",
        "LambdaExecutionPolicy"
      ],
      "Properties": {
        "Description" : "Lambda with SecurityGroup and subnet inside the VPC that includes the resources to which your Lambda function requires access.",
        "Environment" : { "Variables" : { "BELCORP_MONGO_URL":"$BELCORP_MONGO_URL", "BUCKET_URI":"$BUCKET_URI" } },
        "FunctionName" : "BIGDATA_CM_DEV_version_retrieve",
        "ReservedConcurrentExecutions" : 12,
        "Code": {
          "S3Bucket": { "Ref": "S3Bucket" },
          "S3Key": "code/lambdas__version__retrieve.zip"
        },
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Timeout": 60,
        "Handler": "Handler.handler",
        "Runtime": "python3.6",
        "MemorySize": 128,
        "Tags" : [
          { "Key" : "Direccion", "Value" : "BIGDATA" },
          { "Key" : "Entorno", "Value" : "DEV" },
          { "Key" : "Grupo", "Value" : "BIGDATA" }
        ]
      }
    }
  },
  
  "Outputs": {}

}